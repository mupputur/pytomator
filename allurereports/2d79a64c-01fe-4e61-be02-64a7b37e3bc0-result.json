{"name": "test_add_employee_with_login_details_diff_pwd_confpwd", "status": "broken", "statusDetails": {"message": "Exception: Unable to locate the element Username and Error:", "trace": "self = <libUtils.seleniumUtils.weblocate_helper.WebLocateHelper object at 0x00000281B4FE2AE0>, locator = 'username', locator_type = 'NAME'\nelement_text = 'Username'\n\n    def identify_element(self, locator, locator_type, element_text):\n        element = None\n        try:\n            if locator_type == \"XPATH\":\n                element = self.driver.find_element(By.XPATH, locator)\n            elif locator_type == \"NAME\":\n>               element = self.driver.find_element(By.NAME, locator)\n\nlibUtils\\seleniumUtils\\weblocate_helper.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000281B4FE18B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF78E60BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAFEE67344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAFFEE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"username\"]\"}\nE         (Session info: chrome=121.0.6167.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78E9F5E42+3538674]\nE       \t(No symbol) [0x00007FF78E614C02]\nE       \t(No symbol) [0x00007FF78E4C5AEB]\nE       \t(No symbol) [0x00007FF78E50BF4E]\nE       \t(No symbol) [0x00007FF78E50C0CC]\nE       \t(No symbol) [0x00007FF78E54E477]\nE       \t(No symbol) [0x00007FF78E52F0EF]\nE       \t(No symbol) [0x00007FF78E54BDE3]\nE       \t(No symbol) [0x00007FF78E52EE53]\nE       \t(No symbol) [0x00007FF78E4FF514]\nE       \t(No symbol) [0x00007FF78E500631]\nE       \tGetHandleVerifier [0x00007FF78EA26CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF78EA7C506+4089270]\nE       \tGetHandleVerifier [0x00007FF78EA74823+4057299]\nE       \tGetHandleVerifier [0x00007FF78E745C49+720121]\nE       \t(No symbol) [0x00007FF78E62126F]\nE       \t(No symbol) [0x00007FF78E61C304]\nE       \t(No symbol) [0x00007FF78E61C432]\nE       \t(No symbol) [0x00007FF78E60BD04]\nE       \tBaseThreadInitThunk [0x00007FFAFEE67344+20]\nE       \tRtlUserThreadStart [0x00007FFAFFEE26B1+33]\n\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <webapps.orangeHRM.login_page.LoginPage object at 0x00000281B4FE2C60>\n\n    def login(self):\n        try :\n>           self.login_application()\n\nwebapps\\orangeHRM\\login_page.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nwebapps\\orangeHRM\\login_page.py:14: in login_application\n    ele_username = self.helper.identify_element(lp.USERNAME_TB_NAME_LOC[0], lp.USERNAME_TB_NAME_LOC[1], \"Username\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <libUtils.seleniumUtils.weblocate_helper.WebLocateHelper object at 0x00000281B4FE2AE0>, locator = 'username', locator_type = 'NAME'\nelement_text = 'Username'\n\n    def identify_element(self, locator, locator_type, element_text):\n        element = None\n        try:\n            if locator_type == \"XPATH\":\n                element = self.driver.find_element(By.XPATH, locator)\n            elif locator_type == \"NAME\":\n                element = self.driver.find_element(By.NAME, locator)\n                print(element)\n            elif locator_type == \"ID\":\n                element = self.driver.find_element(By.ID, locator)\n        except Exception as e:\n>           raise Exception(\"Unable to locate the element {} and Error: \".format(element_text, str(e)))\nE           Exception: Unable to locate the element Username and Error:\n\nlibUtils\\seleniumUtils\\weblocate_helper.py:26: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <libUtils.seleniumUtils.weblocate_helper.WebLocateHelper object at 0x00000281B4FE2AE0>, locator = 'username', locator_type = 'NAME'\nelement_text = 'Username'\n\n    def identify_element(self, locator, locator_type, element_text):\n        element = None\n        try:\n            if locator_type == \"XPATH\":\n                element = self.driver.find_element(By.XPATH, locator)\n            elif locator_type == \"NAME\":\n>               element = self.driver.find_element(By.NAME, locator)\n\nlibUtils\\seleniumUtils\\weblocate_helper.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000281B4FE18B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF78E60BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAFEE67344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFAFFEE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"username\"]\"}\nE         (Session info: chrome=121.0.6167.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78E9F5E42+3538674]\nE       \t(No symbol) [0x00007FF78E614C02]\nE       \t(No symbol) [0x00007FF78E4C5AEB]\nE       \t(No symbol) [0x00007FF78E50BF4E]\nE       \t(No symbol) [0x00007FF78E50C0CC]\nE       \t(No symbol) [0x00007FF78E54E477]\nE       \t(No symbol) [0x00007FF78E52F0EF]\nE       \t(No symbol) [0x00007FF78E54BDE3]\nE       \t(No symbol) [0x00007FF78E52EE53]\nE       \t(No symbol) [0x00007FF78E4FF514]\nE       \t(No symbol) [0x00007FF78E500631]\nE       \tGetHandleVerifier [0x00007FF78EA26CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF78EA7C506+4089270]\nE       \tGetHandleVerifier [0x00007FF78EA74823+4057299]\nE       \tGetHandleVerifier [0x00007FF78E745C49+720121]\nE       \t(No symbol) [0x00007FF78E62126F]\nE       \t(No symbol) [0x00007FF78E61C304]\nE       \t(No symbol) [0x00007FF78E61C432]\nE       \t(No symbol) [0x00007FF78E60BD04]\nE       \tBaseThreadInitThunk [0x00007FFAFEE67344+20]\nE       \tRtlUserThreadStart [0x00007FFAFFEE26B1+33]\n\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <libUtils.seleniumUtils.driver_manager.DriverManager object at 0x00000281B4F1DE80>\n\n    def test_add_employee_with_login_details_diff_pwd_confpwd(setup):\n        '''\n        1.  Launch the application & login with default credentials\n        2.  Navigate to the PIM\n        3.  Click add button  to add employee details\n        4.  Enter the first  name & last name\n        6.  Enable the Craete Login Details button\n        7.   User the firstname as the username and create a password\n        8.  click the status as enabled and clcik save button\n        9.  Check the employee details in employee list\n        10. Logout the application and re-login with the  new emplyee login details\n        '''\n        #driver_manger = DriverManager()\n>       add = AddEmployeePage(setup.driver)\n\ntests\\test_add_employee.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nwebapps\\orangeHRM\\add_employee_page.py:10: in __init__\n    pim_page = PIMPage(driver)\nwebapps\\orangeHRM\\pim_page.py:11: in __init__\n    home_page = HomePage(driver)\nwebapps\\orangeHRM\\home_page.py:11: in __init__\n    login_page.login()\nwebapps\\orangeHRM\\login_page.py:31: in login\n    self.login_application()\nwebapps\\orangeHRM\\login_page.py:14: in login_application\n    ele_username = self.helper.identify_element(lp.USERNAME_TB_NAME_LOC[0], lp.USERNAME_TB_NAME_LOC[1], \"Username\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <libUtils.seleniumUtils.weblocate_helper.WebLocateHelper object at 0x00000281B4FE2AE0>, locator = 'username', locator_type = 'NAME'\nelement_text = 'Username'\n\n    def identify_element(self, locator, locator_type, element_text):\n        element = None\n        try:\n            if locator_type == \"XPATH\":\n                element = self.driver.find_element(By.XPATH, locator)\n            elif locator_type == \"NAME\":\n                element = self.driver.find_element(By.NAME, locator)\n                print(element)\n            elif locator_type == \"ID\":\n                element = self.driver.find_element(By.ID, locator)\n        except Exception as e:\n>           raise Exception(\"Unable to locate the element {} and Error: \".format(element_text, str(e)))\nE           Exception: Unable to locate the element Username and Error:\n\nlibUtils\\seleniumUtils\\weblocate_helper.py:26: Exception"}, "description": "\n    1.  Launch the application & login with default credentials\n    2.  Navigate to the PIM\n    3.  Click add button  to add employee details\n    4.  Enter the first  name & last name\n    6.  Enable the Craete Login Details button\n    7.   User the firstname as the username and create a password\n    8.  click the status as enabled and clcik save button\n    9.  Check the employee details in employee list\n    10. Logout the application and re-login with the  new emplyee login details\n    ", "attachments": [{"name": "stdout", "source": "a476dfbb-6105-40c5-a59c-0f22e0c30e28-attachment.txt", "type": "text/plain"}], "start": 1707220816652, "stop": 1707220856822, "uuid": "efce9316-1623-456f-853f-2dcf48bc75cc", "historyId": "b060e17945e10a4c4f73c9bc41f8ea44", "testCaseId": "b060e17945e10a4c4f73c9bc41f8ea44", "fullName": "tests.test_add_employee#test_add_employee_with_login_details_diff_pwd_confpwd", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_employee"}, {"name": "host", "value": "DESKTOP-Q1BH83B"}, {"name": "thread", "value": "12856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_employee"}]}